/**
 * This class should hold the state and logic of a robot: where it is, which way it's facing , whether it's carrying a pod right now, and whether it has successfully dropped the pod.
 * A Kiva always starts facing UP(one of our provided FacingDirections). not carrying a pod and not having successfully dropped the pod. the move() method prerforms the logic for 
 * any KivaCommand, and the isSuccessfullDrop() method indicates whether the previous command dropped the pod on the drop zone. 
 * 
 * 
 * @author (Clara Chandler) 
 * @version (09/16/2020)
 */
import edu.duke.Point;

public class Kiva {
 FloorMap floor;
    Point kivaLocation;
    Point podLocation;
    Point dropZoneLocation;
    KivaCommand command;
    FacingDirection directionFacing;
    
    public Kiva (FloorMap floor){
       
        this.floor = floor;
        /* Declare a variable for the direction enum UP */
        this.directionFacing  = FacingDirection.UP;
        /* Returns the location of the up direction as a point */
        Point Up = directionFacing.getDelta();
        /* Returns the location of the Kiva robot as a point */
        this.kivaLocation = floor.getInitialKivaLocation();
        //FloorMapObject pod = FloorMapObject.POD;
        /* Creates a point to hold the pod location for the floor map */
        this.podLocation = floor.getPodLocation();
        this.dropZoneLocation = floor.getDropZoneLocation(); 
     
    }
    
    public Kiva (FloorMap floor, Point point){
      
        /* Declare a variable for the direction enum UP */
        this.directionFacing  = FacingDirection.UP;
        /* Returns the location of the up direction as a point */
        Point Up = directionFacing.getDelta();
        /*Sets the location of the Kiva Robot at the given point*/
        this.kivaLocation = point;
        /* Creates a point to hold the pod location for the floor map */
        this.podLocation = floor.getPodLocation();
        this.dropZoneLocation = floor.getDropZoneLocation(); 
    }
    
    public FacingDirection getDirectionFacing(){
        
        return directionFacing;
    }
    
    public Point getCurrentLocation(){
        
        return kivaLocation;
        
    }
    public boolean isSuccessfullyDropped(){
        boolean isDropped = true;
        boolean isNotDropped = false;
        if(isCarryingPod()){
        }
        if(podLocation == dropZoneLocation){
            return isDropped;
        }else{
            return isNotDropped;
        }
    }
    
    public boolean isCarryingPod(){
       boolean isCarrying = true;
       boolean isNotCarrying = false;
       if(kivaLocation == podLocation){
            return isCarrying;
        }else{
            return isNotCarrying;
        }
        
    }
    
    public void move(KivaCommand command){
        int x;
        int y;
        if(command == KivaCommand.FORWARD){
        x = kivaLocation.getX();
        y = kivaLocation.getY() - 1;
        this.kivaLocation = new Point(x, y);
    }
        
    }
}
